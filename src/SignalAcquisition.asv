classdef SignalAcquisition

%{
    A class I am creating to do GPS Satellite Signal Tracking
        The class will do serial acquisition for now, with the end goal of
        upgrading to do either serial or parallel acquisition

    To-Do:
    1) Constructor [done]
        -> To-Do:
            1)

    2) Upsample function [done]
        -> To-Do:
            1) 

    3) Serial Search Function [done]
        -> To-Do:
            1) 

    4) Parallel Search Function [done]
        -> To-Do:
            1) 
%}

    properties

        % --- General Parameters --- %
        IF_frequency            % <= mix frequency of data
        chipping_rate = 1.023e6 % <= rate of chips (chips/second)
        chipping_cycles         % <- number of cycles of PRN
        ca_sample_rate          % <= is the sample rate of the IF Data 
        Tint                    % <= integration period
        nom_samples_per_chip    % <- this is how many IF samples exist per PRN Chip
        length_single_period    % <= is the number of times that acquisition will be ran 
        length_step_size        % <= is the step size in the acquisition search
        num_steps               % <= the number of steps to do

        % --- Acquisition Parameters --- %
        sv_prns % <= is the list of PRN's to search through
        IF_data % <= is input data
        acquisition_threshold % <- ratio of the two largest peaks in acquisition plane for current SV
        single_acquisition_period

    end % end of properties

    methods

        % ======================================================== %
        % Class Constructor
        function obj = SignalAcquisition(initiation_struct)

            obj.sv_prns = initiation_struct.prn;
            obj.ca_sample_rate = initiation_struct.f_s;
            
            obj.nom_samples_per_chip = obj.ca_sample_rate/obj.chipping_rate;

            if_data_in = initiation_struct.if_data;
            if_freq_in = initiation_struct.f_if;

            % Checking Dimensions of Data 
            [r,c] = size(if_data_in);
            
            if(r>c)
                if_data_in = if_data_in';
            end

            obj.IF_data = if_data_in;
            obj.IF_frequency = if_freq_in;

            obj.acquisition_threshold = initiation_struct.aq_threshold;
            obj.single_acquisition_period = initiation_struct.acquisition_period;
            obj.length_single_period = obj.single_acquisition_period*obj.ca_sample_rate;
            obj.length_step_size = initiation_struct.step_size*obj.ca_sample_rate;
            obj.num_steps = (length(obj.IF_data)/obj.length_step_size)/2 + 1;

        end

        %=================== Utility  ============================== %

        % Upsample the PRN
        function [upsampled_ca_code,obj] = upsamplePRN(obj,prn,data_length)

            % --- Grabbing Stuff from class obj --- %            
            
            % how many samples we want to add
            samples_per_chip = obj.nom_samples_per_chip;

            upsample_idx = ceil(0:1/samples_per_chip:1023-(1/samples_per_chip)) + 1;        

            current_prn = obj.sv_prns(prn,:);
            current_prn = [current_prn(end) current_prn current_prn(1)];

            upsampled_single_code(1,:) = current_prn(upsample_idx);
            number_prn_cycle = data_length/length(upsampled_single_code);
             
            obj.chipping_cycles = number_prn_cycle;

            upsampled_ca_code(1,:) = repmat(upsampled_single_code,1,number_prn_cycle);

        end

        % ========================================================== %


        % ================= Acquisition ============================ %
        function search_struct = acquireSV(obj)

            fprintf('Beginning Parallel Search!\n')
            fprintf('Parallelizing Code Search\n\n')

                for i = 1:obj.num_steps

                    current_data = obj.IF_data(1+obj.length_step_size*(i-1):obj.length_step_size*(i-1) + obj.length_single_period);

                    search_struct(i) = parallelSearch(obj,current_data);

                    if(i == 1)
                        
                        svs_found = search_struct(i).acquired_sv;
                        dopplers_found = search_struct(i).dop_shift;
                        codes_found = search_struct(i).code_shift;

                    else

                        new_svs = setdiff(search_struct(i).acquired_sv,svs_found);

                        if(~isempty(new_svs))

                            new_dopplers = search_struct(i).dop_shift(search_struct(i).acquired_sv == new_svs);
                            new_codes = search_struct(i).code_shift(search_struct(i).acquired_sv == new_svs);

                            [svs_found,sorted_idx] = sort([svs_found,new_svs],'ascend');
                        
                            dopplers_found = [dopplers_found new_dopplers];
                            dopplers_found = dopplers_found(sorted_idx);
        
                            codes_found = [codes_found new_codes];
                            codes_found = codes_found(sorted_idx);

                        end

                    end
                    

                end

                output_struct.sv_list = svs_found;
                output_struct.doppler_shift = dopplers_found;
                output_struct.code_shift = codes_found;


        end

        % Parallel Search
        function parallel_correlation = parallelSearch(obj)

            data = obj.IF_data;
            length_data = length(data);

            [num_codes,~] = size(obj.sv_prns);

            % --- Making Time Vector for local Carrier Replica --- %
            t_end = length(data)/obj.ca_sample_rate;
            t = 0:1/obj.ca_sample_rate:t_end;
            t(end) = [];

            j = 1;
            num_acquired_svs = 0;

            for i = 1:num_codes

                [code_replica,obj] = upsamplePRN(obj,i,length_data);

                for doppler_shift = -5000:250:5000
                
                    f = obj.IF_frequency + doppler_shift;

                    % --- Generating Carrier Replicas --- %
                    I = data.*sin(2*pi*f*t);
                    Q = data.*cos(2*pi*f*t);

                    fft_IQ = fft(I + Q);
                    fft_Code = fft(code_replica);

                    fft_both = fft_IQ.*conj(fft_Code);

                    correlated_val(:,j) = abs(ifft(fft_both)).^2;
                                        
                    max_freq_bin(j) = max(correlated_val(:,j));
                  
                    j = j + 1;
                end

                sorted_freq_bin = sort(max_freq_bin,'descend');

                if((sorted_freq_bin(1)/sorted_freq_bin(2))>=obj.acquisition_threshold)

                    num_acquired_svs = num_acquired_svs + 1;

                    freq_bin_idx = find(max_freq_bin==sorted_freq_bin(1));
                    
                    bin_correlated = correlated_val(:,freq_bin_idx);
                    max_correlation = max(bin_correlated);
                    sample_shift = find(bin_correlated == max_correlation);
                    sample_shift = sample_shift(1);

                    one_cycle = correlated_val(1:length_data/obj.chipping_cycles,:);

                    parallel_correlation.dop_shift(num_acquired_svs) = -5000+250*(freq_bin_idx-1);
                    parallel_correlation.correlation(:,:,num_acquired_svs) = one_cycle;
                    parallel_correlation.code_shift(num_acquired_svs) = sample_shift;
                    parallel_correlation.acquired_sv(num_acquired_svs) = i;

                end
                
                j = 1;

                
                clear correlated_val max_freq_bin

            end

        end % end of parallel search

        % Search Through New Data
        function [correlation_update,obj] = passNewData(obj,new_data)

            obj.IF_data = new_data; % <- passing new data to the class

            fprintf('===================================\n')
            fprintf('RECEIVED NEW DATA!\n')
            fprintf('===================================\n \n')
                
            fprintf('Running Parallel Search\n')
            fprintf('Parallelizing Code Search\n\n')

            correlation_update = parallelSearch(obj);

        end % end of update data function
        % ========================================================== %

    end % end of methods

end